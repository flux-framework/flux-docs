
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/example_job_info_api.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_example_job_info_api.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_example_job_info_api.py:


Introductory example - Job Info API
===================================

This example will show how to get information
about a job after the fact.

.. GENERATED FROM PYTHON SOURCE LINES 9-18

.. code-block:: default



    import json
    import time
    import os
    import flux
    from flux.job import JobspecV1
    import subprocess








.. GENERATED FROM PYTHON SOURCE LINES 19-22

Here we instantiate a flux handle. This will connect to the running flux instance.
If you were running this on a cluster with Flux, you'd likely already be able to
connect. If you are testing out on your own, you might need to do flux start --test-size=4

.. GENERATED FROM PYTHON SOURCE LINES 22-24

.. code-block:: default

    handle = flux.Flux()








.. GENERATED FROM PYTHON SOURCE LINES 25-29

This is a new jobspec, or a recipe for a flux job. You'll notice we are providing a command
directly, along with tasks, nodes, and cores per task. You could also provide a script here.
If we were doing this on the command line, it would be equivalent to what is generated by:
flux submit --ntasks=4 --nodes=2 --cores-per-task=2 sleep 10

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default

    jobspec = JobspecV1.from_command(
        command=["hostname"], num_tasks=1, num_nodes=1, cores_per_task=1
    )








.. GENERATED FROM PYTHON SOURCE LINES 34-35

This is how we set the "current working directory" (cwd) for the job

.. GENERATED FROM PYTHON SOURCE LINES 35-37

.. code-block:: default

    jobspec.cwd = os.getcwd()








.. GENERATED FROM PYTHON SOURCE LINES 38-39

This is how we set the job environment

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    jobspec.environment = dict(os.environ)








.. GENERATED FROM PYTHON SOURCE LINES 42-43

Let's submit the job! We will get the job id.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default

    jobid = flux.job.submit(handle, jobspec)
    time.sleep(2)








.. GENERATED FROM PYTHON SOURCE LINES 47-49

Now let's say we store that jobid somewhere how do we get info later?
We know that if we ran flux jobs -a on the command line, we'd see the job

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    res = subprocess.getoutput('flux jobs -a')
    print(res)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           JOBID USER     NAME       ST NTASKS NNODES     TIME INFO
         Æ’kFU3pT vscode   hostname   CD      1      1   0.028s 610b9ad16799




.. GENERATED FROM PYTHON SOURCE LINES 53-55

And if you are an expert user, you know that you can see metadata for a job
This command, without a key, will show the keys available to you

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    res = subprocess.getoutput(f'flux job info {jobid} | true')
    print(res)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Missing lookup key(s), common keys:
    J
    R
    eventlog
    jobspec
    guest.exec.eventlog
    guest.input
    guest.output




.. GENERATED FROM PYTHON SOURCE LINES 59-61

And since the underlying logic here is pinging the flux KVS or key value store,
we can select one of those keys to view. For example, here is the jobspec

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default

    res = subprocess.getoutput(f'flux job info {jobid} jobspec')
    print(res)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {"resources":[{"type":"node","count":1,"with":[{"type":"slot","count":1,"with":[{"type":"core","count":1}],"label":"task"}]}],"tasks":[{"command":["hostname"],"slot":"task","count":{"per_slot":1}}],"attributes":{"system":{"duration":0,"cwd":"/workspaces/flux-docs/examples"}},"version":1}




.. GENERATED FROM PYTHON SOURCE LINES 65-69

This is great, but ideally we can get this metadata directly from Python.
First, here is a way to get basic jobinfo. Given we start with a string jobid,
we will first want to parse it back into a Flux JobID, and then prepare
a payload to the Job List RPC to say "give me all the attributes back"

.. GENERATED FROM PYTHON SOURCE LINES 69-75

.. code-block:: default

    fluxjob = flux.job.JobID(jobid)
    payload = {"id": fluxjob, "attrs": ["all"]}
    rpc = flux.job.list.JobListIdRPC(handle, "job-list.list-id", payload)
    jobinfo = rpc.get_job()
    print(json.dumps(jobinfo, indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
        "id": 28387049472,
        "userid": 1000,
        "urgency": 16,
        "priority": 16,
        "t_submit": 1682482856.185918,
        "t_depend": 1682482856.1989403,
        "t_run": 1682482856.2132757,
        "t_cleanup": 1682482856.2413428,
        "t_inactive": 1682482856.2439826,
        "state": 64,
        "name": "hostname",
        "ntasks": 1,
        "ncores": 1,
        "duration": 0.0,
        "nnodes": 1,
        "ranks": "0",
        "nodelist": "610b9ad16799",
        "success": true,
        "exception_occurred": false,
        "result": 1,
        "expiration": 4836082856.0,
        "waitstatus": 0
    }




.. GENERATED FROM PYTHON SOURCE LINES 76-78

You can get less commonly used (and thus exposed) metadata like this
such as the emoji state!

.. GENERATED FROM PYTHON SOURCE LINES 78-81

.. code-block:: default

    info = rpc.get_jobinfo()
    print(info.__dict__)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'_t_depend': 1682482856.1989403, '_t_run': 1682482856.2132757, '_t_cleanup': 1682482856.2413428, '_t_inactive': 1682482856.2439826, '_duration': 0.0, '_expiration': 4836082856.0, '_name': 'hostname', '_queue': '', '_ntasks': 1, '_ncores': 1, '_nnodes': 1, '_priority': 16, '_ranks': '0', '_nodelist': '610b9ad16799', '_success': True, '_waitstatus': 0, '_id': JobID(28387049472), '_userid': 1000, '_urgency': 16, '_t_submit': 1682482856.185918, '_exception_occurred': False, '_state_id': 64, '_result_id': 1, '_exception': <flux.job.info.ExceptionInfo object at 0x7f074d584fd0>, '_annotations': , '_sched': , '_user': , '_dependencies': []}




.. GENERATED FROM PYTHON SOURCE LINES 82-85

But for either of the above approaches, we aren't getting anything back about our
original jobspec! That's because we need to query the KVS for that. Notice here we
have metadata like the current working directory (cwd)

.. GENERATED FROM PYTHON SOURCE LINES 85-90

.. code-block:: default

    kvs = flux.job.job_kvs(handle, jobid)
    jobspec =  kvs.get('jobspec')
    print(json.dumps(jobspec))
    time.sleep(2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {"resources": [{"type": "node", "count": 1, "with": [{"type": "slot", "count": 1, "with": [{"type": "core", "count": 1}], "label": "task"}]}], "tasks": [{"command": ["hostname"], "slot": "task", "count": {"per_slot": 1}}], "attributes": {"system": {"duration": 0, "cwd": "/workspaces/flux-docs/examples"}}, "version": 1}




.. GENERATED FROM PYTHON SOURCE LINES 91-94

Finally, to watch (or stream) output, you can do the following.
Each line here is a json structure that you can further parse.
As an example, if "data" is present as a key, this usually is output

.. GENERATED FROM PYTHON SOURCE LINES 94-99

.. code-block:: default

    for line in flux.job.event_watch(handle, jobid, "guest.output"):
        print(line)







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1682482856.23028: header {'version': 1, 'encoding': {'stdout': 'UTF-8', 'stderr': 'UTF-8'}, 'count': {'stdout': 1, 'stderr': 1}, 'options': {}}
    1682482856.23757: data {'stream': 'stderr', 'rank': '0', 'eof': True}
    1682482856.23760: data {'stream': 'stdout', 'rank': '0', 'data': '610b9ad16799\n'}
    1682482856.23763: data {'stream': 'stdout', 'rank': '0', 'eof': True}





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.381 seconds)


.. _sphx_glr_download_auto_examples_example_job_info_api.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_job_info_api.py <example_job_info_api.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_job_info_api.ipynb <example_job_info_api.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
